### 2. MERN

#### 2.1 Configuration de l'environnement 

Avant tout, créer le dossier de l'application, ainsi qu'un sous dossier pour le serveur : 
```bash 
mkdir -p compose-mern
cd compose-mern
mkdir -p server
```

#### 2.2 ReactJs (frontend)

Depuis la racine du dossier de l'application (`compose-mern`), créer un client React Js :
```bash 
npx create-react-app frontend
```

Dans le dossier `frontend`, créer un Dockerfile contenant les lignes suivantes : 
```Dockerfile
# Dockerfile
# Layer 1: Image node 
FROM node:17-alpine 

# Layer 2: Définir le dossier route du container
WORKDIR /app 

# Layer 3: copy les package.json dans le dossier du container
COPY package.json . 

# Layer 4: Installation des dépendances
RUN npm install 

# Layer 5: Copier tous les fichiers depuis le dossier actuel vers le container
COPY . . 

# Layer 6: Définition du port
EXPOSE 3000 

# Layer 7: Run npm start
CMD ["npm", "start"]
```

Ajouter un .dockerignore : 
```dockerfile
node_modules
Dockerfile
.git
.gitignore
.dockerignore
```

Depuis le dossier `frontend` build l'image du projet : 
```bash 
docker build -t frontend-react-image .
```

Run le container : 
```bash
docker run -it --rm -p 3000:3000 --name frontend frontend-react-image
```

L'app est donc dispo depuis le port 3000 : http://localhost:3000/

#### 2.3 Node Express (backend)

Se rendre dans le dossier server, et run la commande suivante : 
```bash 
npm init --y
```
Cette commande va permettre d'initialiser l'app et créer un package.json

Installer express dans `server`: 
```bash 
npm install express --save
```

Créer un fichier nommé : server.js (ce fichier contiendra le code node)  

Dans le fichier server.js ajouter ce code : 
```js 
const express = require('express');

//Create an app
const app = express();
app.get('/', (req, res) => {
    res.send('Hello world\n');
});

//Listen port
const PORT = 8080;
app.listen(PORT);
console.log(`Running on port ${PORT}`);
```

Run l'app pour s'assurer qu'elle est fonctionnelle : 
```bash
node server.js
```

L'app est disponible depuis : http://localhost:8080

#### 2.3.1 Configuration de Dockerfile / .dockerignore

Créer un fichier Dockerfile à la racine de `server` et copier dedans le Dockerfile officiel du site Nodejs : 
```Dockerfile 
# Dockerfile
# Layer 1: Image node:10
FROM node:10

# Layer 2: Création du dossier de l'app
WORKDIR /usr/src/app

# Layer 3: Installer les dépendances.
COPY package*.json ./
RUN npm install

# Layer 4: Copier le contenu de l'app
COPY . .

# Layer 5: Port à écouter par le container
EXPOSE 8080

# Layer 6: Run de la commande node server.js
CMD [ "node", "server.js" ]
```

Créer également un .dockerignore afin d'éviter la copie des node_modules sur le container : 
```dockerfile
# .dockerignore:
node_modules
```
#### 2.3.2 Monter le container

Build l'image : 
```bash
docker build -t backend-node-image .
```

Puis run le container : 
```bash 
docker run -it --rm --name backend -p 8080:8080 backend-node-image
```

### 2.4 docker-compose 

Depuis la racine du projet (`compose-mern`) créer un document docker-compose.yml  
Ajouter les lignes suivantes : 
```dockerfile
version: '3'

services: 
    frontend:
        container_name: frontend 
        build: 
            context: frontend/
        image: frontend-image
        ports:
            - 3000:3000
        command: npm start
        volumes:
            - ./frontend/:/usr/app
            - /usr/app/node_modules
        depends_on:
            - server 
    server:
        container_name: server
        build:
            context: server/
        image: backend-image 
        ports:
            - 5000:5000
        volumes:
            - ./server/:/usr/src/app
            - /usr/src/app/node_modules  
        depends_on:
            - mongo
        environment:
            - NODE_ENV=development
        networks:
            - app-network
    mongo:
        image: mongo
        volumes:
            - data-volume:/data/db
        ports:
            - 3500:3500
        networks:
            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    data-volume:
    node_modules:
```

Depuis la racine de l'app, build l'intégralité de l'app : 
```bash
docker-compose build
```

Enfin, start les container via : 
```yaml
docker-compose up
```

Pour stopper les container : 
```bash
docker-compose stop
```